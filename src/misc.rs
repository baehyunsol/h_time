use lazy_static::lazy_static;

lazy_static! {
    static ref LEAP_YEAR_DAYS: Vec<(i32, i32)> = vec![
        (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (1, 11), (1, 12), (1, 13), (1, 14), (1, 15), (1, 16), (1, 17), (1, 18), (1, 19), (1, 20), (1, 21), (1, 22), (1, 23), (1, 24), (1, 25), (1, 26), (1, 27), (1, 28), (1, 29), (1, 30), (1, 31),
        (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (2, 10), (2, 11), (2, 12), (2, 13), (2, 14), (2, 15), (2, 16), (2, 17), (2, 18), (2, 19), (2, 20), (2, 21), (2, 22), (2, 23), (2, 24), (2, 25), (2, 26), (2, 27), (2, 28), (2, 29),
        (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10), (3, 11), (3, 12), (3, 13), (3, 14), (3, 15), (3, 16), (3, 17), (3, 18), (3, 19), (3, 20), (3, 21), (3, 22), (3, 23), (3, 24), (3, 25), (3, 26), (3, 27), (3, 28), (3, 29), (3, 30), (3, 31),
        (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (4, 10), (4, 11), (4, 12), (4, 13), (4, 14), (4, 15), (4, 16), (4, 17), (4, 18), (4, 19), (4, 20), (4, 21), (4, 22), (4, 23), (4, 24), (4, 25), (4, 26), (4, 27), (4, 28), (4, 29), (4, 30),
        (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14), (5, 15), (5, 16), (5, 17), (5, 18), (5, 19), (5, 20), (5, 21), (5, 22), (5, 23), (5, 24), (5, 25), (5, 26), (5, 27), (5, 28), (5, 29), (5, 30), (5, 31),
        (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10), (6, 11), (6, 12), (6, 13), (6, 14), (6, 15), (6, 16), (6, 17), (6, 18), (6, 19), (6, 20), (6, 21), (6, 22), (6, 23), (6, 24), (6, 25), (6, 26), (6, 27), (6, 28), (6, 29), (6, 30),
        (7, 1), (7, 2), (7, 3), (7, 4), (7, 5), (7, 6), (7, 7), (7, 8), (7, 9), (7, 10), (7, 11), (7, 12), (7, 13), (7, 14), (7, 15), (7, 16), (7, 17), (7, 18), (7, 19), (7, 20), (7, 21), (7, 22), (7, 23), (7, 24), (7, 25), (7, 26), (7, 27), (7, 28), (7, 29), (7, 30), (7, 31),
        (8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8), (8, 9), (8, 10), (8, 11), (8, 12), (8, 13), (8, 14), (8, 15), (8, 16), (8, 17), (8, 18), (8, 19), (8, 20), (8, 21), (8, 22), (8, 23), (8, 24), (8, 25), (8, 26), (8, 27), (8, 28), (8, 29), (8, 30), (8, 31),
        (9, 1), (9, 2), (9, 3), (9, 4), (9, 5), (9, 6), (9, 7), (9, 8), (9, 9), (9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17), (9, 18), (9, 19), (9, 20), (9, 21), (9, 22), (9, 23), (9, 24), (9, 25), (9, 26), (9, 27), (9, 28), (9, 29), (9, 30),
        (10, 1), (10, 2), (10, 3), (10, 4), (10, 5), (10, 6), (10, 7), (10, 8), (10, 9), (10, 10), (10, 11), (10, 12), (10, 13), (10, 14), (10, 15), (10, 16), (10, 17), (10, 18), (10, 19), (10, 20), (10, 21), (10, 22), (10, 23), (10, 24), (10, 25), (10, 26), (10, 27), (10, 28), (10, 29), (10, 30), (10, 31),
        (11, 1), (11, 2), (11, 3), (11, 4), (11, 5), (11, 6), (11, 7), (11, 8), (11, 9), (11, 10), (11, 11), (11, 12), (11, 13), (11, 14), (11, 15), (11, 16), (11, 17), (11, 18), (11, 19), (11, 20), (11, 21), (11, 22), (11, 23), (11, 24), (11, 25), (11, 26), (11, 27), (11, 28), (11, 29), (11, 30),
        (12, 1), (12, 2), (12, 3), (12, 4), (12, 5), (12, 6), (12, 7), (12, 8), (12, 9), (12, 10), (12, 11), (12, 12), (12, 13), (12, 14), (12, 15), (12, 16), (12, 17), (12, 18), (12, 19), (12, 20), (12, 21), (12, 22), (12, 23), (12, 24), (12, 25), (12, 26), (12, 27), (12, 28), (12, 29), (12, 30), (12, 31)
    ];
    static ref NORMAL_YEAR_DAYS: Vec<(i32, i32)> = vec![
        (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (1, 11), (1, 12), (1, 13), (1, 14), (1, 15), (1, 16), (1, 17), (1, 18), (1, 19), (1, 20), (1, 21), (1, 22), (1, 23), (1, 24), (1, 25), (1, 26), (1, 27), (1, 28), (1, 29), (1, 30), (1, 31),
        (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (2, 10), (2, 11), (2, 12), (2, 13), (2, 14), (2, 15), (2, 16), (2, 17), (2, 18), (2, 19), (2, 20), (2, 21), (2, 22), (2, 23), (2, 24), (2, 25), (2, 26), (2, 27), (2, 28),
        (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10), (3, 11), (3, 12), (3, 13), (3, 14), (3, 15), (3, 16), (3, 17), (3, 18), (3, 19), (3, 20), (3, 21), (3, 22), (3, 23), (3, 24), (3, 25), (3, 26), (3, 27), (3, 28), (3, 29), (3, 30), (3, 31),
        (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (4, 10), (4, 11), (4, 12), (4, 13), (4, 14), (4, 15), (4, 16), (4, 17), (4, 18), (4, 19), (4, 20), (4, 21), (4, 22), (4, 23), (4, 24), (4, 25), (4, 26), (4, 27), (4, 28), (4, 29), (4, 30),
        (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14), (5, 15), (5, 16), (5, 17), (5, 18), (5, 19), (5, 20), (5, 21), (5, 22), (5, 23), (5, 24), (5, 25), (5, 26), (5, 27), (5, 28), (5, 29), (5, 30), (5, 31),
        (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10), (6, 11), (6, 12), (6, 13), (6, 14), (6, 15), (6, 16), (6, 17), (6, 18), (6, 19), (6, 20), (6, 21), (6, 22), (6, 23), (6, 24), (6, 25), (6, 26), (6, 27), (6, 28), (6, 29), (6, 30),
        (7, 1), (7, 2), (7, 3), (7, 4), (7, 5), (7, 6), (7, 7), (7, 8), (7, 9), (7, 10), (7, 11), (7, 12), (7, 13), (7, 14), (7, 15), (7, 16), (7, 17), (7, 18), (7, 19), (7, 20), (7, 21), (7, 22), (7, 23), (7, 24), (7, 25), (7, 26), (7, 27), (7, 28), (7, 29), (7, 30), (7, 31),
        (8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8), (8, 9), (8, 10), (8, 11), (8, 12), (8, 13), (8, 14), (8, 15), (8, 16), (8, 17), (8, 18), (8, 19), (8, 20), (8, 21), (8, 22), (8, 23), (8, 24), (8, 25), (8, 26), (8, 27), (8, 28), (8, 29), (8, 30), (8, 31),
        (9, 1), (9, 2), (9, 3), (9, 4), (9, 5), (9, 6), (9, 7), (9, 8), (9, 9), (9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17), (9, 18), (9, 19), (9, 20), (9, 21), (9, 22), (9, 23), (9, 24), (9, 25), (9, 26), (9, 27), (9, 28), (9, 29), (9, 30),
        (10, 1), (10, 2), (10, 3), (10, 4), (10, 5), (10, 6), (10, 7), (10, 8), (10, 9), (10, 10), (10, 11), (10, 12), (10, 13), (10, 14), (10, 15), (10, 16), (10, 17), (10, 18), (10, 19), (10, 20), (10, 21), (10, 22), (10, 23), (10, 24), (10, 25), (10, 26), (10, 27), (10, 28), (10, 29), (10, 30), (10, 31),
        (11, 1), (11, 2), (11, 3), (11, 4), (11, 5), (11, 6), (11, 7), (11, 8), (11, 9), (11, 10), (11, 11), (11, 12), (11, 13), (11, 14), (11, 15), (11, 16), (11, 17), (11, 18), (11, 19), (11, 20), (11, 21), (11, 22), (11, 23), (11, 24), (11, 25), (11, 26), (11, 27), (11, 28), (11, 29), (11, 30),
        (12, 1), (12, 2), (12, 3), (12, 4), (12, 5), (12, 6), (12, 7), (12, 8), (12, 9), (12, 10), (12, 11), (12, 12), (12, 13), (12, 14), (12, 15), (12, 16), (12, 17), (12, 18), (12, 19), (12, 20), (12, 21), (12, 22), (12, 23), (12, 24), (12, 25), (12, 26), (12, 27), (12, 28), (12, 29), (12, 30), (12, 31)
    ];
    pub static ref LEAP_YEAR_DAYS_REV: Vec<Vec<i32>> = vec![
        vec![],
        (-1..31).collect(),
        (30..60).collect(),
        (59..91).collect(),
        (90..121).collect(),
        (120..152).collect(),
        (151..182).collect(),
        (181..213).collect(),
        (212..244).collect(),
        (243..274).collect(),
        (273..305).collect(),
        (304..335).collect(),
        (334..366).collect(),
    ];
    pub static ref NORMAL_YEAR_DAYS_REV: Vec<Vec<i32>> = vec![
        vec![],
        (-1..31).collect(),
        (30..59).collect(),
        (58..90).collect(),
        (89..120).collect(),
        (119..151).collect(),
        (150..181).collect(),
        (180..212).collect(),
        (211..243).collect(),
        (242..273).collect(),
        (272..304).collect(),
        (303..334).collect(),
        (333..365).collect(),
    ];

}

// N/01/01 - 1970/01/01 = COUNT_YEAR_TABLE[N - 1900]
const COUNT_YEAR_TABLE: [i32; 256] = [-25567, -25202, -24837, -24472, -24107, -23741, -23376, -23011, -22646, -22280, -21915, -21550, -21185, -20819, -20454, -20089, -19724, -19358, -18993, -18628, -18263, -17897, -17532, -17167, -16802, -16436, -16071, -15706, -15341, -14975, -14610, -14245, -13880, -13514, -13149, -12784, -12419, -12053, -11688, -11323, -10958, -10592, -10227, -9862, -9497, -9131, -8766, -8401, -8036, -7670, -7305, -6940, -6575, -6209, -5844, -5479, -5114, -4748, -4383, -4018, -3653, -3287, -2922, -2557, -2192, -1826, -1461, -1096, -731, -365, 0, 365, 730, 1096, 1461, 1826, 2191, 2557, 2922, 3287, 3652, 4018, 4383, 4748, 5113, 5479, 5844, 6209, 6574, 6940, 7305, 7670, 8035, 8401, 8766, 9131, 9496, 9862, 10227, 10592, 10957, 11323, 11688, 12053, 12418, 12784, 13149, 13514, 13879, 14245, 14610, 14975, 15340, 15706, 16071, 16436, 16801, 17167, 17532, 17897, 18262, 18628, 18993, 19358, 19723, 20089, 20454, 20819, 21184, 21550, 21915, 22280, 22645, 23011, 23376, 23741, 24106, 24472, 24837, 25202, 25567, 25933, 26298, 26663, 27028, 27394, 27759, 28124, 28489, 28855, 29220, 29585, 29950, 30316, 30681, 31046, 31411, 31777, 32142, 32507, 32872, 33238, 33603, 33968, 34333, 34699, 35064, 35429, 35794, 36160, 36525, 36890, 37255, 37621, 37986, 38351, 38716, 39082, 39447, 39812, 40177, 40543, 40908, 41273, 41638, 42004, 42369, 42734, 43099, 43465, 43830, 44195, 44560, 44926, 45291, 45656, 46021, 46387, 46752, 47117, 47482, 47847, 48212, 48577, 48942, 49308, 49673, 50038, 50403, 50769, 51134, 51499, 51864, 52230, 52595, 52960, 53325, 53691, 54056, 54421, 54786, 55152, 55517, 55882, 56247, 56613, 56978, 57343, 57708, 58074, 58439, 58804, 59169, 59535, 59900, 60265, 60630, 60996, 61361, 61726, 62091, 62457, 62822, 63187, 63552, 63918, 64283, 64648, 65013, 65379, 65744, 66109, 66474, 66840, 67205, 67570];

pub fn is_leap(year: i32) -> bool {
    year % 4 == 0 && !(year % 100 == 0 && year % 400 != 0)
}

// 1970/01/01 + `days` days = (year, day)
pub fn count_year(days: i32) -> (i32, i32) {

    if COUNT_YEAR_TABLE[0] > days || days > COUNT_YEAR_TABLE[COUNT_YEAR_TABLE.len() - 1] {
        count_year_naive(days)
    }

    else {
        // (days + 25567) / 365 + 1900 ~= y
        let mut ind = (-COUNT_YEAR_TABLE[0] + days) as usize / 365;

        while ind < COUNT_YEAR_TABLE.len() && COUNT_YEAR_TABLE[ind] <= days {
            ind += 1;
        }

        ind -= 1;

        #[cfg(test)]
        assert!(days >= COUNT_YEAR_TABLE[ind]);

        (ind as i32 + 1900, days - COUNT_YEAR_TABLE[ind])
    }

}

fn count_year_naive(mut days: i32) -> (i32, i32) {
    let mut curr_year = 1970;

    while days < 0 {
        curr_year -= 1;

        if is_leap(curr_year) {
            days += 366;
        }

        else {
            days += 365;
        }

    }

    loop {

        if is_leap(curr_year) && days >= 366 {
            curr_year += 1;
            days -= 366;
        }

        else if days >= 365 {
            curr_year += 1;
            days -= 365;
        }

        else {
            break;
        }

    }

    #[cfg(test)] assert!(days >= 0);

    (curr_year, days)
}

// year/01/01 - 1970/01/01
pub fn count_year_rev(year: i32) -> i32 {

    if year < 1900 || year > 2155 {
        count_year_rev_naive(year)
    }

    else {
        COUNT_YEAR_TABLE[year as usize - 1900]
    }

}

fn count_year_rev_naive(year: i32) -> i32 {

    if year < 1970 {
        (year - 1970) * 365 - (year..1970).filter(|y| is_leap(*y)).collect::<Vec<i32>>().len() as i32
    }

    else {
        (year - 1970) * 365 + (1970..year).filter(|y| is_leap(*y)).collect::<Vec<i32>>().len() as i32
    }

}

pub fn yday_to_mday(yday: i32, is_leap: bool) -> (i32, i32) {  // (month, m_day)

    if is_leap {
        LEAP_YEAR_DAYS[yday as usize]
    }

    else {
        NORMAL_YEAR_DAYS[yday as usize]
    }

}

pub fn now() -> i64 {
    let now = chrono::offset::Local::now();

    // Local::now().timestamp() returns UNIX timestamp which is not affected by TimeZone
    (now.timestamp() + now.offset().local_minus_utc() as i64) * 1_000_000 + now.timestamp_subsec_micros() as i64
}

#[cfg(test)]
mod tests {

    #[test]
    fn count_year_test() {
        use super::{count_year, count_year_rev};

        for i in 0..365 {
            assert_eq!(count_year(i - 1096), (1967, i));
            assert_eq!(count_year(i - 731), (1968, i));
            assert_eq!(count_year(i - 365), (1969, i));
            assert_eq!(count_year(i), (1970, i));
            assert_eq!(count_year(i + 365), (1971, i));
            assert_eq!(count_year(i + 730), (1972, i));
            assert_eq!(count_year(i + 1096), (1973, i));
        }

        assert_eq!(count_year_rev(1967), -1096);
        assert_eq!(count_year_rev(1968), -731);
        assert_eq!(count_year_rev(1969), -365);
        assert_eq!(count_year_rev(1970), 0);
        assert_eq!(count_year_rev(1971), 365);
        assert_eq!(count_year_rev(1972), 730);
        assert_eq!(count_year_rev(1973), 1096);

        for year in 1000..3000 {
            assert_eq!((year, 0), count_year(count_year_rev(year)));
            assert_eq!((year, 1), count_year(count_year_rev(year) + 1));
        }

    }

    #[test]
    fn leap_year_test() {
        use crate::misc::is_leap;

        assert!(is_leap(2012));
        assert!(!is_leap(2013));
        assert!(!is_leap(1900));
        assert!(is_leap(2000));
        assert!(!is_leap(2100));
    }

    #[test]
    fn calendar_test() {
        use crate::misc::{NORMAL_YEAR_DAYS, LEAP_YEAR_DAYS};
        let leap_year_calendar = LEAP_YEAR_DAYS.clone();
        let normal_year_calendar = NORMAL_YEAR_DAYS.clone();

        assert_eq!(normal_year_calendar.len(), 365);

        let (mut last_m, mut last_d) = (0, 0);

        for (m, d) in leap_year_calendar.iter() {
            assert!(*m == last_m + 1 || m == &last_m && *d == last_d + 1);
            last_m = *m;
            last_d = *d;
        }

    }

    #[test]
    fn calendar_test2() {
        use crate::misc::{NORMAL_YEAR_DAYS, LEAP_YEAR_DAYS, NORMAL_YEAR_DAYS_REV, LEAP_YEAR_DAYS_REV};

        for i in 0..365 {
            let (m, d) = NORMAL_YEAR_DAYS[i];
            assert_eq!(NORMAL_YEAR_DAYS_REV[m as usize][d as usize], i as i32);
            let (m, d) = LEAP_YEAR_DAYS[i];
            assert_eq!(LEAP_YEAR_DAYS_REV[m as usize][d as usize], i as i32);
        }

    }

}